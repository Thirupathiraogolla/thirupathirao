#check given number is postive number are not
num=int(input ('enter  a number:'))
if num>0:
  print('postitve')
else:
  print('negative')
===========================================
#check the given number is perfect square are not
num =int(input('enter a number: '))
i=1
while i**3<=num:
    if i**3 == num:
        print(f'it is perfect square number')
        break
    i+=1    
else:
    print('it is not perfectsquare number')
===========================================
#given number is prime number are not
num =int(input('enter a number: '))
i=1
cnt=0
while i <= num:
    if num % i == 0:
        cnt+=1
    i+=1
if cnt==2:
    print(f'it is prime number {num}')
else:
    print('it is not prime number')
===========================================
# print the 1 to 100 prime number by using while loop
num =1 
while num<=100:
    i=1
    cnt=0
    while i<=(num//2)+1:
        if num % i ==0:
            cnt+=1
        i+=1
    if cnt==1:
        print(num)
    num+=1   
===========================================
#n th prime number:
n =int(input('enter a number: '))
num =1
d_cnt=0
while True:
    i=1
    cnt=0
    while num>= i:
        if num % i ==0 :
            cnt+=1
        i += 1
    if cnt == 2:
        
        d_cnt +=1
    if d_cnt == n:
        print(f'it is prime number {num}')
        break
    num+=1
===========================================
# given number is pallndrom are not without using any method
num =int(input('enter a number: '))
p=0
bkp = num
while 0 < num :
    t = num % 10
    p = p*10+t
    num //= 10
if bkp == p:
    print(f'it is pallandrom number')
else:
    print(f'it is not palladrom number')
# it while be working on intger numbers only
===========================================
#sum digits of the given number 
num = int(input('enter a number: '))

s = 0
while 0<num:
    t = num%10
    s += t
    num //= 10
print(s)
===========================================
# sum even digit count in givrn number up single digit number.
num = int(input('enter a number: '))
while True:
    cnt=0
    s=0
    while 0<num:
        t = num %10
        cnt +=1
        if cnt %2 ==0:
            s += t
        num //= 10    
    if s>9:
        num =s
    else:   
        print(s)
        break
============================================
# check if character is vowel or a consonant 
s = input('enter a string: ')
i= 0
vowel_cnt =0
conson_cnt =0 
while i<=len(s)-1:
    if s[i] in 'aeiou':
        vowel_cnt +=1
    else:
        conson_cnt +=1
        
    i+=1
if vowel_cnt > conson_cnt:
    print(f'majarity of the vowels here {vowel_cnt}')
else:
    print(f'majarity of the conson here{conson_cnt}')
============================================
# max value in the given list.
'''x =[1,2,3,1,1,56,44]
first_value = 0
second_value =1
for i in x:
    if first_value < i:
        first_value = i
    if second_value < i and i != first_value:
        second_value =i
print(first_value,second_value) 
=================================================== '''
# rotations of the in the list:
while True:
    print('1. right_rotation')
    print('2. left_rotation')
    print('3.exit')
    li =[10,20,30,40,50,60]
    output =[]
    ch = int(input('choose the one number: '))
    if ch == 1:
        
        ele = int(input('enter a element:'))
        if ele in li:
            idx = li.index(ele)
            output.extend(li[idx+1:])
            output.extend (li [:idx+1])
            print(output)
            
        else:
            print('the element is not their in list')
    elif ch == 2:
        ele = int(input('enter a element: '))
        if ele in li:
            idx = li.index(ele)
            output.extend(li[idx-1::-1])
            output.extend (li[ :idx-1 :-1])
            print(output)
        else:
            print('the element is not found in list')
    else:
        exit =input('do want to exit (yes/no:')
        if exit == 'yes':
            print('end of the program')
            break
    output =[] 
    =============================================
# sorting:there are two type of the sorting is there one commmon and private
li = [10,20,30,4,3,2,1]
res = sorted(x)
print(res)

li.sort(reverse = True)
print(li) 
#without using the sorting.
li = [1,10,20,30,4,3,2,1]

for i in range (0,len(li)):
    min_value = min(li[i:])
    idx = li[i:].index(min_value)+i
    li [idx] , li[i] = li[i],li[idx]
print(li) # ascending order
res =reversed(li) # descending order
for i in res:
    print(i)
==============================================================================
#stack :(LIFO)

stack =[]
while True:
    print('1.add')
    print('2.remove')
    print('3.tremanted')
    print('4. exit')
    ch =int(input('enter a element: '))
    if ch == 1 :
        ele =int(input('enter a value: '))
        stack.append(ele)
    elif ch == 2:
        
        stack.remove(stack[0])
    elif ch == 3:
        print('*'*10)
        for i in stack:
            print(i,end=' ')
        print() 
    else:
        exit = input('Do want to stop (yes/no):')
        if exit ==  "yes":
            print('end of the adding or removeing')
        break
==================================================================
        #Queue :(FIFO)
Queue =[]
while True:
    print('1.add')
    print('2.remove')
    print('3.treverse')
    print('4.exit')
    ch = int(input('choose the one value: '))
    if ch == 1:
        print('1.intger')
        print('2.str')
        print('3.blooen')
        print('4.complex')
        print('5.float')
        ch = int(input('choose the datatype:'))
        if ch ==1:
            ele = int(input('enter a element'))
        elif ch == 2:
            ele =input('enter a string: ')
        elif ch == 3:
            ele =input('enter a element :')
        elif ch == 4:
            ele = complex(input('enter a complexvalue'))
        else:
            ele = float(input('enter a element: '))
        Queue.append(ele)
    elif ch ==2 :
        Queue.pop()
    elif ch == 3:
        print('*'*10)
        for i in Queue:
            print(i,end= ' ')
        print()
    else:
        exit = input('enter a value: ')
        if exit ==  "yes":
            print('Exit')
            break
==============================================================================
# decimal number to roman numbers.
decimal =[10,9,5,4,1]
roman = ['X','IX','V','IV','I']
ele = int(input('enter a element: ')
for i in decimal:
    q = ele//i
    idx = decimal.index(i)
    print(roman[idx]*q)
    ele%=i
========================================================================================
'''method overriding : same pic of code with two method are the same but parmeters are different.
 --> in python method overriding is not there
 --> there will be providing the arugments.'''
'''def addition(*arug):
    c = sum(arug)
    return f'total sum of the number is {c}'

print(addition(10,20,30,0.4,50)) '''

#positional arguments
def uname(name,age):
    res = ''' user name is {} and his age is{}'''.format(name,age)
    return res
print(uname(34,'thiru'))

#keyword arguments:
def username(name,age):
    return f'user name is {name} and is his age is {age}'
print(username(age=34,name='thiru'))  

#Dictionary arguments
def usname(**kwargs):
    kwargs.update(education='Bachelor of technology')
    return kwargs
    
print(usname(name='thiru',age='34',gender='Male'))  


        =============================================================

